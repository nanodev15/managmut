 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nehemie_mutuelle;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import static nehemie_mutuelle.TontineUser.conn;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author elommarcarnold
 */
public class TontineSynthese extends javax.swing.JFrame {
    Connection conn = null;
    PreparedStatement pre= null;
    private Date startDate=null;
    private Date endDate=null;
    private PreparedStatement pre1=null;
    private PreparedStatement pre2=null;
    private Vector<Vector> data;
    static int totalrow;
    static int TOTAL_COLUMN=1;
    private static final int MAX = 100;
    private static final int MIN = 0;

    private TableRowSorter <DefaultTableModel> sorter;

    /** Creates new form TontineSynthese */
    public TontineSynthese() {
        initComponents();
    }
    
  class IndicatorCellRenderer extends JProgressBar implements TableCellRenderer {
  private Hashtable limitColors;

  private int[] limitValues;

  public IndicatorCellRenderer() {
    super(JProgressBar.HORIZONTAL);
    setBorderPainted(false);
  }

  public IndicatorCellRenderer(int min, int max) {
    super(JProgressBar.HORIZONTAL, min, max);
    setBorderPainted(false);
  }

  public Component getTableCellRendererComponent(JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column) {
    double n = 0;
      System.out.println("value"+value);
    if (!(value instanceof Number)) {
      String str;
      if (value instanceof String) {
        str = (String) value;
      } else {
        str = value.toString();
      }
      try {
        n = Double.valueOf(str).doubleValue();
      } catch (NumberFormatException ex) {
      }
    } else {
      n = ((Number) value).intValue();
    }
    Color color = getColor(n);
    if (color != null) {
      setForeground(color);
    }
    setValue((new Double(n)).intValue());
    DecimalFormat df= new DecimalFormat();
    df.setMaximumIntegerDigits(2);
    setString(df.format(n));
    return this;
  }

  public void setLimits(Hashtable limitColors) {
   this.limitColors = limitColors;
    int i = 0;
    int n = limitColors.size();
    limitValues = new int[n];
    Enumeration e = limitColors.keys();
    while (e.hasMoreElements()) {
      limitValues[i++] = ((Integer) e.nextElement()).intValue();
    }
    sort(limitValues);
  }

  private Color getColor(double value) {
    Color color = null;
    if (limitValues != null) {
      int i;
      for (i = 0; i < limitValues.length; i++) {
        if (limitValues[i] < value) {
          color = (Color) limitColors
              .get(new Integer(limitValues[i]));
        }
      }
    }
    return color;
  }

  private void sort(int[] a) {
    int n = a.length;
    for (int i = 0; i < n - 1; i++) {
      int k = i;
      for (int j = i + 1; j < n; j++) {
        if (a[j] < a[k]) {
          k = j;
        }
      }
      int tmp = a[i];
      a[i] = a[k];
      a[k] = tmp;
    }
  }
}
    
    public class FrozenTablePane extends JScrollPane{
 
 public FrozenTablePane(JTable table, int colsToFreeze){
    super(table);
 
    TableModel model = table.getModel();
    
 
    //create a frozen model
    TableModel frozenModel = new DefaultTableModel(
                                model.getRowCount(),
                                colsToFreeze);
 
    //populate the frozen model
    for (int i = 0; i < model.getRowCount(); i++) {
      for (int j = 0; j < colsToFreeze; j++) {
        String value = (String) model.getValueAt(i, j);
        frozenModel.setValueAt(value, i, j);
      }
    }
 
    //create frozen table
    JTable frozenTable = new JTable(frozenModel);
    for (int j = 0; j < colsToFreeze; j++) {
        JTableHeader th = frozenTable.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(j);
        tc.setHeaderValue(table.getColumnName(j));
        th.repaint();
        
    }
    
    frozenTable.getColumnModel().getColumn(0).setPreferredWidth(30);
    frozenTable.getColumnModel().getColumn(1).setPreferredWidth(90);
    frozenTable.getColumnModel().getColumn(2).setPreferredWidth(250);
    
 
    //remove the frozen columns from the original table
    for (int j = 0; j < colsToFreeze; j++) {
      table.removeColumn(table.getColumnModel().getColumn(0));
    }
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
 
    //format the frozen table
    JTableHeader header = table.getTableHeader();
    frozenTable.setBackground(header.getBackground());
    frozenTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    frozenTable.setEnabled(false);
 
    //set frozen table as row header view
    JViewport viewport = new JViewport();
    viewport.setView(frozenTable);
    viewport.setPreferredSize(frozenTable.getPreferredSize());
    setRowHeaderView(viewport);
    setCorner(JScrollPane.UPPER_LEFT_CORNER, frozenTable.getTableHeader());
  }
}
    
    public Vector getSynthesebymonth(int month) throws Exception {
        conn = Connect.ConnectDb(); 
        pre1=conn.prepareStatement("SELECT DateTontine, SUM(M)");
        return null;
        
    }
   
    
    public Vector getSynthese()throws Exception {
        conn = Connect.ConnectDb(); 
        Calendar beginCalendar = Calendar.getInstance();
        Calendar finishCalendar = Calendar.getInstance();
        if(startDate != null) {
        beginCalendar.setTimeInMillis(startDate.getTime());
        beginCalendar.set (Calendar.DAY_OF_MONTH,1); 
        finishCalendar.setTimeInMillis(endDate.getTime());
            System.out.println("endDate"+endDate);
        Vector<Vector> TontineVector = new Vector<Vector>();
        ResultSet rs1=null;
        ResultSet rs2=null;
        Date date;
        // String date;
        while (beginCalendar.before(finishCalendar) || beginCalendar.equals(finishCalendar)) {
        // add one month to date per loop
        date = beginCalendar.getTime(); 
        java.sql.Date sqldate= new java.sql.Date(date.getTime());
        pre1=conn.prepareStatement("SELECT DateTontine, SUM(Mise), SUM((bit_count(JoursTontine))*Mise) FROM Tontine  WHERE (bit_count(JoursTontine)) >=1 AND DateTontine='"+sqldate+"'");
        rs1 = pre1.executeQuery();
        pre2=conn.prepareStatement("SELECT SUM(Montant) FROM retraits_tontine WHERE MONTH(DateRet)=MONTH('"+sqldate+"') AND YEAR(DateRet)=YEAR('"+sqldate+"')");
        rs2 = pre2.executeQuery();
        Vector<Object> tont = new Vector<Object>();
        if (rs1.next()){
            tont.add(date);
            tont.add(((Number) rs1.getInt(2)).doubleValue());
            tont.add(rs1.getDouble(3));
            if (rs2.next()){
                  tont.add(rs2.getDouble(1));
            } else {
                  tont.add((double)0);
            }
            TontineVector.add(tont);
        } else {
            tont.add(date);
            tont.add((double)0);
            tont.add((double)0);
            if (rs2.next()){
                  tont.add(rs1.getDouble(1));
            } else {
                  tont.add((double)0);
            }
            TontineVector.add(tont);
        }
     beginCalendar.add(Calendar.MONTH, 1);     
        
    }
        
      totalrow=TontineVector.size()-1; 
      Vector<Object> tont2 = new Vector<Object>();
    
      
int yearstopped = beginCalendar.get(Calendar.YEAR);
int monthstopped = beginCalendar.get(Calendar.MONTH);

Date today= new Date();
Calendar caltoday = Calendar.getInstance();
caltoday.setTime(today);
int yeartoday = caltoday.get(Calendar.YEAR);
int monthtoday = caltoday.get(Calendar.MONTH);
while(yearstopped != yeartoday || monthstopped != monthtoday) {
    System.out.println("true in the loop"+monthstopped);
    date = beginCalendar.getTime(); 
    java.sql.Date sqldate= new java.sql.Date(date.getTime());
    Vector<Object> tont = new Vector<Object>();
    pre2=conn.prepareStatement("SELECT SUM(Montant) FROM retraits_tontine WHERE MONTH(DateRet)=MONTH('"+sqldate+"') AND YEAR(DateRet)=YEAR('"+sqldate+"')");
    rs2 = pre2.executeQuery();
    tont.add(date);
    tont.add((double)0);
    tont.add((double)0);
    if (rs2.next()){
                  tont.add(rs2.getDouble(1));
            } else {
                  tont.add((double)0);
            }
    TontineVector.add(tont);
    beginCalendar.add(Calendar.MONTH, 1);
    yearstopped = beginCalendar.get(Calendar.YEAR);
    monthstopped = beginCalendar.get(Calendar.MONTH);
    
}

// For this month
    date = beginCalendar.getTime(); 
    java.sql.Date sqldate= new java.sql.Date(date.getTime());
    Vector<Object> tont = new Vector<Object>();
    pre2=conn.prepareStatement("SELECT SUM(Montant) FROM retraits_tontine WHERE MONTH(DateRet)=MONTH('"+sqldate+"') AND YEAR(DateRet)=YEAR('"+sqldate+"')");
    rs2 = pre2.executeQuery();
    tont.add(date);
    tont.add((double)0);
    tont.add((double)0);
    if (rs2.next()){
                  tont.add(rs2.getDouble(1));
            } else {
                  tont.add((double)0);
            }
    TontineVector.add(tont);

      // Total
      tont2.add(new Date());
      tont2.add((double) 0);
      tont2.add((double) 0);
      tont2.add((double) 0);
      TontineVector.add(tont2);
      
      
      if(rs1!=null) rs1.close();
      if(rs2!=null) rs2.close();
      if(pre1!=null) pre1.close();
      if(pre2!=null) pre2.close();
      conn.close();
      return TontineVector;} else {
            return null;
        }}
    
    
    public ChartPanel PlotCurve(){
 
        XYSeries series = new XYSeries("MyGraph");
        series.add(0, 1);
        series.add(1, 2);
        series.add(2, 5);
        series.add(7, 8);
        series.add(9, 10);


        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createXYLineChart(
                "XY Chart",
                "x-axis",
                "y-axis",
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );
        ChartPanel chartPanel = new ChartPanel(chart);
        return chartPanel;

  //  Container contenu = getContentPane() ;
   // contenu.add(panel);
        
    } 
    
    public void setChart (ChartPanel p){
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries t1 = new TimeSeries("Commission sur Tontine");
        for (int i=0; i< jTable1.getRowCount(); i++) {
            System.out.println("dttype"+jTable1.getValueAt(i, 0));
            t1.add(new Day((Date)jTable1.getValueAt(i, 0)), (double) jTable1.getValueAt(i, 1));
        }
//        XYSeries series = new XYSeries("MyGraph");
//        series.add(0, 1);
//        series.add(1, 2);
//        series.add(2, 5);
//        series.add(7, 8);
//        series.add(9, 10);
        dataset.addSeries(t1);
//
//        XYSeriesCollection dataset = new XYSeriesCollection();
//        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "Progression des cotisations pour "+jComboBox1.getSelectedItem().toString(),
                "Mois",
                "Montant",
                dataset);
        
      p.setChart(chart);

  //  Container contenu = getContentPane() ;
   // contenu.add(panel);
        
    } 
    
    
     public JFreeChart getChart (){
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries t1 = new TimeSeries("Commission sur Tontine");
        for (int i=0; i< jTable1.getRowCount(); i++) {
            t1.add(new Day((Date)jTable1.getValueAt(i, 0)), (double) jTable1.getValueAt(i, 1));
        }
//        XYSeries series = new XYSeries("MyGraph");
//        series.add(0, 1);
//        series.add(1, 2);
//        series.add(2, 5);
//        series.add(7, 8);
//        series.add(9, 10);
        dataset.addSeries(t1);
//
//        XYSeriesCollection dataset = new XYSeriesCollection();
//        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createXYLineChart(
                "Progression des cotisations pour ",
                "Mois",
                "Montant",
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );
        
     return(chart);

  //  Container contenu = getContentPane() ;
   // contenu.add(panel);
        
    } 
    
    
   private void reCalcurate(TableModel ml) {
    if (ml == null)
      return;
    double total = 0.0;
    for (int i = 0; i < totalrow; i++) {
   //   total += ((Double) ml.getValueAt(i, totalrow)).doubleValue();
        total += ((Double) jTable1.getValueAt(i, totalrow)).doubleValue();
    }

    jTable1.setValueAt(new Double(total), totalrow, TOTAL_COLUMN);
  }
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable() {
            public boolean getScrollableTracksViewportWidth(){
                return getPreferredSize().width < getParent().getWidth();
            }
        };
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel3 = new ChartPanel(getChart());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nehemie_mutuelle/Bilan_tontine.png"))); // NOI18N

        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setOpaque(true);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel1.setVerifyInputWhenFocusTarget(false);

        conn = Connect.ConnectDb();
        ResultSet rs0 = null;
        try {
            pre = conn.prepareStatement("SELECT MIN(DateTontine), MAX(DateTontine) FROM Tontine");
            rs0 = pre.executeQuery();
            while (rs0.next()) {
                startDate=rs0.getDate(1);
                endDate=rs0.getDate(2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(TontineSynthese.class.getName()).log(Level.SEVERE, null, ex);
        }   finally {

            try {
                if (rs0 !=null)
                rs0.close();

                if (pre !=null)
                pre.close();

                if (conn !=null)
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(TontineSynthese.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try {
            // TODO add your handling code here:
            data=getSynthese();
        } catch (Exception ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] out = to2DimArray(data);

        //jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.setFillsViewportHeight(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            out,
            new String [] {
                "Mois", "Commission sur Tontine", "Cotisation", "Retraits"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            Class[] types = {Date.class, Double.class, Double.class,
                Double.class};

            @Override
            public Class getColumnClass(int columnIndex) {
                return this.types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
            // nouveau ajout
            // public void setValueAt(Object value, int row, int col) {
                //     Vector rowVector = (Vector) dataVector.elementAt(row);
                //     if (col == TOTAL_COLUMN) {
                    //          Double d = null;
                    //         if (value instanceof Double) {
                        //            d = (Double) value;
                        //         } else {
                        //            try {
                            //                 d = new Double(((Number) formatter
                                //                     .parse((String) value)).doubleValue());
                        //         } catch (ParseException ex) {
                        //            d = new Double(0.0);
                        //         }
                    //    }
                //      rowVector.setElementAt(d, col);
                //  } else {
                //      rowVector.setElementAt(value, col);
                //  }}

    });
    //sorter
    sorter = new TableRowSorter<DefaultTableModel>((DefaultTableModel)jTable1.getModel());
    jTable1.setRowSorter(sorter);

    //jTable1.getModel().addTableModelListener(new TableModelListener() {

        //     public void tableChanged(TableModelEvent e) {
            //          totalrow= jTable1.getRowCount() -1;
            //          reCalcurate(jTable1.getModel());
            //      }
        //    });
jScrollPane1.setViewportView(jTable1);

jLabel2.setText("Choix de l'année:");

jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exercice 2011", "Exercice 2012", "Exercice 2013", "Exercice 2014" }));
int minyear=0;
int maxyear=0;
conn = Connect.ConnectDb();
ResultSet rs = null;
try {
    pre = conn.prepareStatement("SELECT MIN(YEAR(DateTontine)) as minyear, MAX(YEAR(DateTontine)) as maxyear FROM Tontine");
    rs = pre.executeQuery();
    while (rs.next()) {
        minyear=rs.getInt(1);
        //maxyear=rs.getInt(2);
        maxyear=Calendar.getInstance().get(Calendar.YEAR);  // méthode à revoir
        if(maxyear < rs.getInt(2)) maxyear=rs.getInt(2);
    }
    } catch (SQLException ex) {
        Logger.getLogger(TontineSynthese.class.getName()).log(Level.SEVERE, null, ex);
    }   finally {

        try {
            if (rs !=null)
            rs.close();

            if (pre !=null)
            pre.close();

            if (conn !=null)
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(TontineSynthese.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Connect.close(conn, rs, pre);

    if (minyear !=0 && maxyear !=0){
        jComboBox1.removeAllItems();
        for (int i=minyear; i<=maxyear; i++) {
            jComboBox1.addItem("Exercice "+i);
        }
    }
    jComboBox1.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jComboBox1ItemStateChanged(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap(22, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jLabel2)
                    .add(18, 18, 18)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 769, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(32, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(12, 12, 12)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel2)
                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(83, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Bilan annuel", jPanel1);

    jPanel2.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            jPanel2FocusGained(evt);
        }
    });

    jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

    jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jTable2.setFillsViewportHeight(true);
    jTable2.setPreferredScrollableViewportSize(new Dimension(1000,70));
    jTable2.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, "df", "df", null, null, null, null, "50.4534", null, null, null},
            {null, null, null, null, null, null, null, "20.58", null, null, null},
            {null, null, null, null, null, null, null, "10.2585", null, null, null},
            {null, null, null, null, null, null, null, "85.258", null, null, null},
            {null, null, null, null, null, null, null, "69.258", null, null, null},
            {null, null, null, null, null, null, null, "3258.25", null, null, null}
        },
        new String [] {
            "N°", "N° Carnet", "Noms & Prénoms", "Report", "Mise", "Retenue", "Cot. /31", "Pourcentage", "Total", "Retraits", "Solde"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }
    });
    jTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
    jTable2.getColumnModel().getColumn(1).setPreferredWidth(90);
    jTable2.getColumnModel().getColumn(2).setPreferredWidth(250);
    jTable2.getColumnModel().getColumn(3).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(4).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(5).setPreferredWidth(90);
    jTable2.getColumnModel().getColumn(6).setPreferredWidth(120);
    jTable2.getColumnModel().getColumn(7).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(8).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(9).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(10).setPreferredWidth(130);

    // Progress bar renderer
    IndicatorCellRenderer renderer = new IndicatorCellRenderer(MIN, MAX);
    renderer.setStringPainted(true);
    renderer.setBackground(jTable2.getBackground());

    // set limit value and fill color
    Hashtable limitColors = new Hashtable();
    limitColors.put(new Integer(0), Color.green);
    limitColors.put(new Integer(60), Color.yellow);
    limitColors.put(new Integer(80), Color.red);
    renderer.setLimits(limitColors);
    System.out.println("dfdfd column model"+jTable2.getColumnModel().getColumnCount());
    jTable2.getColumnModel().getColumn(7).setCellRenderer(renderer);

    jScrollPane2= new FrozenTablePane(jTable2, 3);
    jScrollPane2.setViewportView(jTable2);

    org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
    );

    jTabbedPane2.addTab("tab1", jPanel4);

    jLabel3.setText("Année :");

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    JPanel jPanel5 = new JPanel();
    jTabbedPane2.add("tab 2", jPanel5);
    //jTabbedPane2.add("tab 3", jPanel4);
    //jTabbedPane2.add("tab 4", jPanel4);
    //jTabbedPane2.add("tab 5", jPanel4);

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane2)
                .add(jPanel2Layout.createSequentialGroup()
                    .add(jLabel3)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 256, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel3)
                .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 352, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    jTabbedPane1.addTab("Versements", jPanel2);

    //if (jComboBox1.getSelectedIndex() != -1) setChart((ChartPanel) jPanel3);
    jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
    //jScrollPane2= new FrozenTablePane(jTable2, 1);
    //jScrollPane2.setViewportView(jTable2);

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 823, Short.MAX_VALUE)
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 416, Short.MAX_VALUE)
    );

    jTabbedPane1.addTab("Progression annuelle", jPanel3);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(jLabel1)
            .add(0, 0, Short.MAX_VALUE))
        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jTabbedPane1))
    );

    jTabbedPane1.getAccessibleContext().setAccessibleName("");

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        RowFilter<DefaultTableModel, Object> rf  = RowFilter.regexFilter(((String)jComboBox1.getSelectedItem().toString()).substring(jComboBox1.getSelectedItem().toString().lastIndexOf(" ")+1), 0);
        sorter.setRowFilter(rf);

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jPanel2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel2FocusGained
        // TODO add your handling code here:
      
        
    }//GEN-LAST:event_jPanel2FocusGained

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
         JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();
        int index = sourceTabbedPane.getSelectedIndex();
        if(index==2 && jComboBox1.getSelectedIndex() != -1) {
            setChart((ChartPanel) jPanel3);
        }
        
    }//GEN-LAST:event_jTabbedPane1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TontineSynthese.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TontineSynthese.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TontineSynthese.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TontineSynthese.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TontineSynthese().setVisible(true);
            }
        });
    }
    
    public static Object[][] to2DimArray(Vector v) {
        Object[][] out = new Object[v.size()][0];
        for (int i = 0; i < out.length; i++) {
            out[i] = ((Vector) v.get(i)).toArray();
        }
        return out;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

}
