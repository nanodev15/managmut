/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nehemie_mutuelle;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang.time.DateUtils;

/**
 *
 * @author elommarcarnold
 */
public class Compta_mutuelle extends javax.swing.JFrame {
    private Connection conn;
    private PreparedStatement pre;
    private Map <String, ArrayList<Date>> ftchash;

    /** Creates new form Compta_mutuelle */
    public Compta_mutuelle() throws Exception {
        initComponents();
        ftchash= new HashMap<String, ArrayList<Date>>();
        buildftchash();
        System.out.println("ftcsum" + calculateftcsumm(2016,7,2018,7));
        System.out.println("openfees" +calculateopenfees(2016,7,2018,7));
        System.out.println("partsociale" +calculateSocialPart(2016,7,2018,7));
        System.out.println("commission tontine" +commissiontontine(2018,1,2018,1));
        System.out.println("Frais d'adhesion tontine" +calculateopenfeestontine(2010,7,2018,7));
        
}
    
    
    public void buildftchash() throws SQLException, Exception {
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT DISTINCT IdEpargnant, TypeEpargnant FROM Epargne ");
        ResultSet rs = pre.executeQuery();
          while (rs.next()) {
              fillftctable(rs.getString(2), rs.getInt(1));
          }
          
           if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
    }
    
    
    private int countftc(Date date) {
        int count=0;
        for (ArrayList<Date> value: ftchash.values()) {
         //   System.out.println("value"+value);
            if(value.contains((Date) date)) {
                System.out.println("true");
                count++;
            }
        }
        
        return count;
        
    }
     
     public static Object[][] to2DimArray(Vector v) {
        Object[][] out = new Object[v.size()][0];
        for (int i = 0; i < out.length; i++) {
            out[i] = ((Vector) v.get(i)).toArray();
        }
        return out;
    } 
     
      public boolean isTwentyEighthDayOfTheMonth(Date dateToday){
        Calendar c = new GregorianCalendar();
        c.setTime(dateToday);
        return c.get(Calendar.DAY_OF_MONTH)==28;
    }
     
     
public void fillftctable(String typeEpargnant, int idEpargnant) throws Exception {
        ftchash.put(typeEpargnant+" "+idEpargnant, new ArrayList<Date>()); 
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT id AS ide, w AS dte, d AS description, \n" +
"   CASE WHEN (a>=0) THEN a ELSE NULL END AS cshIN,\n" +
"   CASE WHEN (a<0) THEN SUBSTR(a,2,10) ELSE NULL END AS cshOUT\n" +
"  FROM\n" +
"  (SELECT Epargne.IdEpargne as id, Epargne.DateEpargne AS w, Epargne.MotifEpargne AS d, \n" +
"          Epargne.MontantEpargne AS a\n" +
"     FROM Epargne\n" +
"     WHERE IdEpargnant='" + idEpargnant + "' AND TypeEpargnant='" + typeEpargnant + "'\n" +          
"     GROUP BY Epargne.DateEpargne, Epargne.MotifEpargne, Epargne.MontantEpargne) t");

        ResultSet rs = pre.executeQuery();
        SimpleDateFormat sdf2= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        // Vector<Vector<String>> membreVector = new Vector<Vector<String>>();

        
        Double balance = 0d;
        boolean firstentry=true;
        Date previous = null;
        Date date=new Date();
        Date d=new Date(); 
        boolean onceftc=false;
        while (rs.next()) {
            if (firstentry) previous = sdf2.parse(rs.getString("dte"));   // modified
             date=sdf2.parse(rs.getString("dte"));
             // Modified 
            GregorianCalendar gcal= new GregorianCalendar();
            gcal.setTime(previous);
            gcal.set(Calendar.MILLISECOND, 0);
            gcal.set(Calendar.SECOND, 0); 
            gcal.set(Calendar.MINUTE, 0);
            gcal.set(Calendar.HOUR_OF_DAY, 0);       
            while (!gcal.getTime().after(date)) {
                 d = gcal.getTime();
                if(isTwentyEighthDayOfTheMonth(d) && balance >= 100 && (firstentry==false)) {
                    balance =balance-100;
                    onceftc=true;
                    ftchash.get(typeEpargnant+" "+idEpargnant).add(d);
                }
                gcal.add(Calendar.DAY_OF_YEAR, 1);
            }             
            balance= balance -rs.getDouble("cshOUT") +rs.getDouble("cshIN");           
            previous=date; // modified
            firstentry= false; //modified
        }
        
        // retraits des frais de tenue de compte jusqu'au jour actuel
       
          if (!firstentry) {
           Date date2=new Date();
             // Modified 
            GregorianCalendar gcal= new GregorianCalendar();
            gcal.setTime(previous);
            gcal.set(Calendar.MILLISECOND, 0);
            gcal.set(Calendar.SECOND, 0); 
            gcal.set(Calendar.MINUTE, 0);
            gcal.set(Calendar.HOUR_OF_DAY, 0);
            
            
            while (!gcal.getTime().after(date2)) {
          
                Date d2 = gcal.getTime();
                if(isTwentyEighthDayOfTheMonth(d2) && balance >= 100 && (!(isTwentyEighthDayOfTheMonth(previous) && onceftc==true &&  DateUtils.isSameDay(d2,d)))) {     
                    balance =balance-100;
                    ftchash.get(typeEpargnant+" "+idEpargnant).add(d2);
                  
                }
                gcal.add(Calendar.DAY_OF_YEAR, 1);
            }
         }

        /*Close the connection after use (MUST)*/
        if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
        
       
    }
 
     public Double calculateftcsumm (int startyr, int startmnth, int endyr, int endmnth) {
        Calendar caltweighthismonth= Calendar.getInstance();  
        caltweighthismonth.set(Calendar.HOUR_OF_DAY, 0);
        caltweighthismonth.set(Calendar.MINUTE, 0);
        caltweighthismonth.set(Calendar.SECOND, 0);
        caltweighthismonth.set(Calendar.MILLISECOND, 0);
        caltweighthismonth.set(startyr, startmnth, 28);
        Date startDate =  caltweighthismonth.getTime();
        caltweighthismonth.set(endyr, endmnth, 28);
        Date endDate =  caltweighthismonth.getTime();
         int mnthcount=0;
         int count=0;
        for (Date dat=startDate; dat.compareTo(endDate)<=0; dat= DateUtils.addMonths(dat, 1) ) {
            mnthcount= countftc(dat)*100;
            System.out.println("mnthcount"+mnthcount);
            count= count + mnthcount;
            
            
        }
            
       return (double) count;  
         
     }
     
     
     public Double calculateopenfees (int startyr, int startmnth, int endyr, int endmnth) throws SQLException {
        DecimalFormat decformatter = new DecimalFormat( "#00" );
        String beginDateStr = String.valueOf(startyr)+"-"+decformatter.format(startmnth)+"-"+"01";
        String endDateStr = String.valueOf(endyr)+"-"+decformatter.format(endmnth)+"-"+"01"; 
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT COUNT(*) FROM (SELECT a.idProfil_enfant as id, a.Date_adhesion_ep as DateEp,  'Enfant' as TypeEp From Profil_enfant a WHERE a.Type_adhesion LIKE '%Epargne%' UNION\n"+
                "SELECT b.idProfil_adulte as id, b.Date_adhesion_ep as DateEp,  'Adulte' as TypeEp From Profil_adulte b WHERE b.Type_adhesion LIKE '%Epargne%' UNION\n"+
                "SELECT c.idProfil_persmorale as id, c.Date_adhesion_ep as DateEp, 'Pers Morale' as TypeEp From Profil_persmorale c WHERE c.Type_adhesion LIKE '%Epargne%') midtab WHERE DateEp >= '"+ beginDateStr+"' AND DateEp <= LAST_DAY('"+endDateStr+"')\n");
        ResultSet rs = pre.executeQuery();
        double fees = 0;
        if (rs.next()) fees =(double) 2500* rs.getInt(1);  
          
        if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
        return fees;
     }
     
     
    public Double calculateSocialPart(int startyr, int startmnth, int endyr, int endmnth) throws SQLException {
        DecimalFormat decformatter = new DecimalFormat( "#00" );
        String beginDateStr = String.valueOf(startyr)+"-"+decformatter.format(startmnth)+"-"+"01";
        String endDateStr = String.valueOf(endyr)+"-"+decformatter.format(endmnth)+"-"+"01"; 
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT SUM(Part_soc) FROM (SELECT a.idProfil_enfant as id, a.Date_adhesion_ep as DateEp,  'Enfant' as TypeEp, a.Part_sociale as Part_soc From Profil_enfant a WHERE a.Type_adhesion LIKE '%Epargne%' UNION\n"+
                "SELECT b.idProfil_adulte as id, b.Date_adhesion_ep as DateEp,  'Adulte' as TypeEp, b.Part_sociale as Part_soc From Profil_adulte b WHERE b.Type_adhesion LIKE '%Epargne%' UNION\n"+
                "SELECT c.idProfil_persmorale as id, c.Date_adhesion_ep as DateEp, 'Pers Morale' as TypeEp, c.Part_sociale as Part_soc From Profil_persmorale c WHERE c.Type_adhesion LIKE '%Epargne%') midtab WHERE DateEp >= '"+ beginDateStr+"' AND DateEp <= LAST_DAY('"+endDateStr+"')\n");
        ResultSet rs = pre.executeQuery();
        double partsoc = 0;
        if (rs.next()) partsoc =rs.getDouble(1);  
          
        if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
        return partsoc;
       
    }
       
       
       // Partie tontine
    public Double commissiontontine (int startyr, int startmnth, int endyr, int endmnth) throws SQLException {
        conn = Connect.ConnectDb();
        DecimalFormat decformatter = new DecimalFormat( "#00" );
        String beginDateStr = String.valueOf(startyr)+"-"+decformatter.format(startmnth)+"-"+"01";
        String endDateStr = String.valueOf(endyr)+"-"+decformatter.format(endmnth)+"-"+"01"; 
        System.out.println("beginDateStr"+beginDateStr);
        System.out.println("endDateStr"+endDateStr);
        pre=conn.prepareStatement("SELECT DateTontine, SUM(Mise) FROM Tontine  WHERE (bit_count(JoursTontine)) >=1 AND DateTontine >='"+beginDateStr+"' AND DateTontine <='"+endDateStr+"'");
        ResultSet rs = pre.executeQuery();
        double comm = 0;
        if (rs.next()) comm =rs.getDouble(2);  
          
        if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
        return comm;
       
    }
    
     public Double calculateopenfeestontine (int startyr, int startmnth, int endyr, int endmnth) throws SQLException {   // Peut être sujet à modification, tenir compte de changements d'adhesion
        DecimalFormat decformatter = new DecimalFormat( "#00" );
        String beginDateStr = String.valueOf(startyr)+"-"+decformatter.format(startmnth)+"-"+"01";
        String endDateStr = String.valueOf(endyr)+"-"+decformatter.format(endmnth)+"-"+"01"; 
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT COUNT(*) FROM (SELECT a.idProfil_enfant as id, a.Date_adhesion_ep as DateEp,  'Enfant' as TypeEp From Profil_enfant a WHERE a.Type_adhesion LIKE '%Tontine%' UNION\n"+
                "SELECT b.idProfil_adulte as id, b.Date_adhesion_ep as DateEp,  'Adulte' as TypeEp From Profil_adulte b WHERE b.Type_adhesion LIKE '%Tontine%' UNION\n"+
                "SELECT c.idProfil_persmorale as id, c.Date_adhesion_ep as DateEp, 'Pers Morale' as TypeEp From Profil_persmorale c WHERE c.Type_adhesion LIKE 'Tontine%') midtab WHERE DateEp >= '"+ beginDateStr+"' AND DateEp <= LAST_DAY('"+endDateStr+"')\n");
        ResultSet rs = pre.executeQuery();
        double fees = 0;
        if (rs.next()) fees =(double) 500* rs.getInt(1);  
          
        if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
        return fees;
     }
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nehemie_mutuelle/compta_mutu.png"))); // NOI18N
        jLabel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Libellé", "Montant", "Type"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jSplitPane1.setRightComponent(jScrollPane1);

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton1)
                    .add(jButton2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(jButton1)
                .add(18, 18, 18)
                .add(jButton2)
                .addContainerGap(389, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1)
        );

        jTabbedPane1.addTab("Bilan", jPanel1);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1006, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 489, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Evolution", jPanel2);

        jLabel2.setText("Déb période");

        jLabel3.setText("Fin période");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Entrées");

        jLabel6.setText("Sorties");

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jLabel9.setText("Solde");

        jTextField3.setText("jTextField2");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .add(4, 4, 4)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel9)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField3)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .add(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel9)
                        .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2)
                        .add(jLabel3)
                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel4)
                        .add(jLabel6)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 527, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compta_mutuelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compta_mutuelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compta_mutuelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compta_mutuelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Compta_mutuelle().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Compta_mutuelle.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}
