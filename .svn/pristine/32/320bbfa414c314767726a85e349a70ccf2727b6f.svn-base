/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nehemie_mutuelle;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import static nehemie_mutuelle.EpargneContext_rel.pre;
import static nehemie_mutuelle.TontineSynthese.totalrow;
import static nehemie_mutuelle.main.conn;
import org.apache.commons.lang.time.DateUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author elommarcarnold
 */
public class Epargneview2 extends javax.swing.JFrame {
    private Connection conn;
    private Vector<Vector<Object>> data;
    private Vector<Vector<Object>> data2;
    private Vector<Vector<Object>> datamonth;
    Vector<String> header = new Vector<String>();
    PreparedStatement pre= null;
    private Date startDate=null;
    private Date endDate=null;
    private PreparedStatement pre1;
    private PreparedStatement pre2;
    static int totalrow;
    static int TOTAL_COLUMN=1;
    private TableRowSorter <DefaultTableModel> sorter;
    private Map <String, ArrayList<Date>> ftchash;

    /** Creates new form Epargneview2 */
    public Epargneview2() throws Exception {
        initComponents();
              
    }
    
    public void fillmonthTables (int month, int year) throws SQLException{
        conn = Connect.ConnectDb(); 
        PreparedStatement pre = conn.prepareStatement("SELECT ");

    }
    
     public class FrozenTablePane extends JScrollPane{
 
 public FrozenTablePane(JTable table, int colsToFreeze){
    super(table);
 
    TableModel model = table.getModel();
    
 
    //create a frozen model
    TableModel frozenModel = new DefaultTableModel(
                                model.getRowCount(),
                                colsToFreeze);
 
    //populate the frozen model
    for (int i = 0; i < model.getRowCount(); i++) {
      for (int j = 0; j < colsToFreeze; j++) {
        String value = (String) model.getValueAt(i, j);
        frozenModel.setValueAt(value, i, j);
      }
    }
 
    //create frozen table
    JTable frozenTable = new JTable(frozenModel);
    for (int j = 0; j < colsToFreeze; j++) {
        JTableHeader th = frozenTable.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(j);
        tc.setHeaderValue(table.getColumnName(j));
        th.repaint();
        
    }
    
    frozenTable.getColumnModel().getColumn(0).setPreferredWidth(30);
    frozenTable.getColumnModel().getColumn(1).setPreferredWidth(90);
    frozenTable.getColumnModel().getColumn(2).setPreferredWidth(250);
    
 
    //remove the frozen columns from the original table
    for (int j = 0; j < colsToFreeze; j++) {
      table.removeColumn(table.getColumnModel().getColumn(0));
    }
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
 
    //format the frozen table
    JTableHeader header = table.getTableHeader();
    frozenTable.setBackground(header.getBackground());
    frozenTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    frozenTable.setEnabled(false);
 
    //set frozen table as row header view
    JViewport viewport = new JViewport();
    viewport.setView(frozenTable);
    viewport.setPreferredSize(frozenTable.getPreferredSize());
    setRowHeaderView(viewport);
    setCorner(JScrollPane.UPPER_LEFT_CORNER, frozenTable.getTableHeader());
  }
}
    
    
    public void buildftchash() throws SQLException, Exception {
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT DISTINCT IdEpargnant, TypeEpargnant FROM Epargne ");
        ResultSet rs = pre.executeQuery();
          while (rs.next()) {
              fillftctable(rs.getString(2), rs.getInt(1));
          }
          
           if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
    }
    
    
    private int countftc(Date date) {
        int count=0;
        for (ArrayList<Date> value: ftchash.values()) {
         //   System.out.println("value"+value);
            if(value.contains((Date) date)) {
                System.out.println("true");
                count++;
            }
        }
        
        return count;
        
    }
     
     public static Object[][] to2DimArray(Vector v) {
        Object[][] out = new Object[v.size()][0];
        for (int i = 0; i < out.length; i++) {
            out[i] = ((Vector) v.get(i)).toArray();
        }
        return out;
    } 
     
      public boolean isTwentyEighthDayOfTheMonth(Date dateToday){
        Calendar c = new GregorianCalendar();
        c.setTime(dateToday);
        return c.get(Calendar.DAY_OF_MONTH)==28;
    }
     
     
public void fillftctable(String typeEpargnant, int idEpargnant) throws Exception {
        ftchash.put(typeEpargnant+" "+idEpargnant, new ArrayList<Date>()); 
        conn = Connect.ConnectDb();
        pre = conn.prepareStatement("SELECT id AS ide, w AS dte, d AS description, \n" +
"   CASE WHEN (a>=0) THEN a ELSE NULL END AS cshIN,\n" +
"   CASE WHEN (a<0) THEN SUBSTR(a,2,10) ELSE NULL END AS cshOUT\n" +
"  FROM\n" +
"  (SELECT Epargne.IdEpargne as id, Epargne.DateEpargne AS w, Epargne.MotifEpargne AS d, \n" +
"          Epargne.MontantEpargne AS a\n" +
"     FROM Epargne\n" +
"     WHERE IdEpargnant='" + idEpargnant + "' AND TypeEpargnant='" + typeEpargnant + "'\n" +          
"     GROUP BY Epargne.DateEpargne, Epargne.MotifEpargne, Epargne.MontantEpargne) t");

        ResultSet rs = pre.executeQuery();
        SimpleDateFormat sdf2= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        // Vector<Vector<String>> membreVector = new Vector<Vector<String>>();

       
        Double balance = 0d;
        boolean firstentry=true;
        Date previous = null;
        Date date=new Date();
        Date d=new Date(); 
        boolean onceftc=false;
        while (rs.next()) {
            if (firstentry) previous = sdf2.parse(rs.getString("dte"));   // modified
             date=sdf2.parse(rs.getString("dte"));
             // Modified 
            GregorianCalendar gcal= new GregorianCalendar();
            gcal.setTime(previous);
            gcal.set(Calendar.MILLISECOND, 0);
            gcal.set(Calendar.SECOND, 0); 
            gcal.set(Calendar.MINUTE, 0);
            gcal.set(Calendar.HOUR_OF_DAY, 0);       
            while (!gcal.getTime().after(date)) {
                 d = gcal.getTime();
                if(isTwentyEighthDayOfTheMonth(d) && balance >= 100 && (firstentry==false)) {
                    balance =balance-100;
                    onceftc=true;
                    ftchash.get(typeEpargnant+" "+idEpargnant).add(d);
                }
                gcal.add(Calendar.DAY_OF_YEAR, 1);
            }             
            balance= balance -rs.getDouble("cshOUT") +rs.getDouble("cshIN");           
            previous=date; // modified
            firstentry= false; //modified
        }
        
        // retraits des frais de tenue de compte jusqu'au jour actuel
       
          if (!firstentry){
           Date date2=new Date();
             // Modified 
            GregorianCalendar gcal= new GregorianCalendar();
            gcal.setTime(previous);
            gcal.set(Calendar.MILLISECOND, 0);
            gcal.set(Calendar.SECOND, 0); 
            gcal.set(Calendar.MINUTE, 0);
            gcal.set(Calendar.HOUR_OF_DAY, 0);
            
            
            while (!gcal.getTime().after(date2)) {
          
                Date d2 = gcal.getTime();
                if(isTwentyEighthDayOfTheMonth(d2) && balance >= 100 && (!(isTwentyEighthDayOfTheMonth(previous) && onceftc==true &&  DateUtils.isSameDay(d2,d)))) {     
                    balance =balance-100;
                    ftchash.get(typeEpargnant+" "+idEpargnant).add(d2);
                  
                }
                gcal.add(Calendar.DAY_OF_YEAR, 1);
            }
         }

        /*Close the connection after use (MUST)*/
        if (conn != null) {
            conn.close();
        }
        
          if (pre != null) {
            pre.close();
        }
         
         if (rs != null) {
            rs.close();
        }
        
       
    }
////public boolean ftc(String typedher, int id, ){
     
//        
//        
//    }  
    public Vector getSynthese()throws Exception {
       
        ftchash= new HashMap<String, ArrayList<Date>>();
        buildftchash();
        Calendar beginCalendar = Calendar.getInstance();
        Calendar finishCalendar = Calendar.getInstance();
        if(startDate != null) {
        beginCalendar.setTimeInMillis(startDate.getTime());
        beginCalendar.set (Calendar.DAY_OF_MONTH,1); 
        finishCalendar.setTimeInMillis(endDate.getTime());
        Vector<Vector> TontineVector = new Vector<Vector>();
        Date date;
        // String date;
        conn = Connect.ConnectDb(); 
        while (beginCalendar.before(finishCalendar) || beginCalendar.equals(finishCalendar)) {
        //add one month to date per loop
        date = beginCalendar.getTime(); 
        java.sql.Date sqldate= new java.sql.Date(date.getTime());
        pre1=conn.prepareStatement("SELECT SUM(MontantEpargne) FROM Epargne  WHERE MONTH(DateEpargne)=MONTH('"+sqldate+"') AND YEAR(DateEpargne)=YEAR('"+sqldate+"') AND MontantEpargne >= 0");
        ResultSet rs1 = pre1.executeQuery();
        pre2=conn.prepareStatement("SELECT SUM(MontantEpargne) FROM Epargne  WHERE MONTH(DateEpargne)=MONTH('"+sqldate+"') AND YEAR(DateEpargne)=YEAR('"+sqldate+"') AND MontantEpargne < 0");
        pre=conn.prepareStatement("SELECT SUM(MontantEpargne) FROM Epargne  WHERE MONTH(DateEpargne)=MONTH('"+sqldate+"') AND YEAR(DateEpargne)=YEAR('"+sqldate+"')");
        ResultSet rs = pre.executeQuery();
        ResultSet rs2 = pre2.executeQuery();
        // Algorithme un peu naif à améliorer 
        Calendar caltweighthismonth= Calendar.getInstance();  
        caltweighthismonth.set(Calendar.HOUR_OF_DAY, 0);
        caltweighthismonth.set(Calendar.MINUTE, 0);
        caltweighthismonth.set(Calendar.SECOND, 0);
        caltweighthismonth.set(Calendar.MILLISECOND, 0);
        caltweighthismonth.set(beginCalendar.get(Calendar.YEAR), beginCalendar.get(Calendar.MONTH), 28);
        Date tweighthismonth =  caltweighthismonth.getTime();
        System.out.println("tweig"+tweighthismonth);
        // looking for ftc value 
        Double ftc= (double) countftc(tweighthismonth)*100;
        
        Vector<Object> tont = new Vector<Object>();
        tont.add(date);
        tont.add(ftc);
        if (rs1.next()){
            tont.add(rs1.getDouble(1));
            if (rs2.next()){
                  tont.add(rs2.getDouble(1));
            } else {
                  tont.add((double)0);
            }
          //  tont.add(rs.getDouble(1));
            if (rs.next()){
                  tont.add(rs.getDouble(1));
            } else {
                  tont.add((double)0);
            }
            TontineVector.add(tont);
        } else {
           
            tont.add((double)0);
            if (rs2.next()){
                  tont.add(rs1.getDouble(1));
            } else {
                  tont.add((double)0);
            }
            
            if (rs.next()){
                  tont.add(rs.getDouble(1));
            } else {
                  tont.add((double)0);
            }
            TontineVector.add(tont);
        }
        
     beginCalendar.add(Calendar.MONTH, 1);     
        
    } 
    totalrow=TontineVector.size()-1; 
      Vector<Object> tont2 = new Vector<Object>();
      tont2.add(new Date());
      tont2.add((double) 0);
      tont2.add((double) 0);
      tont2.add((double) 0);
      TontineVector.add(tont2);
      return TontineVector;} else {
            return null;
        }}
    
    
    public ChartPanel PlotCurve(){
 
        XYSeries series = new XYSeries("MyGraph");
        series.add(0, 1);
        series.add(1, 2);
        series.add(2, 5);
        series.add(7, 8);
        series.add(9, 10);


        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createXYLineChart(
                "XY Chart",
                "x-axis",
                "y-axis",
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );
        ChartPanel chartPanel = new ChartPanel(chart);
        return chartPanel;

  //  Container contenu = getContentPane() ;
   // contenu.add(panel);
        
    } 
    
    public void setChart (ChartPanel p){
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries t1 = new TimeSeries("Solde par mois");
        for (int i=0; i< jTable4.getRowCount()-1; i++) {
            System.out.println("Date"+(Date)jTable4.getValueAt(i, 0));
           // System.out.println("dttype"+jTable1.getValueAt(i, 0));
            t1.add(new Day((Date)jTable4.getValueAt(i, 0)), (double) jTable4.getValueAt(i, 4));
        }
//        XYSeries series = new XYSeries("MyGraph");
//        series.add(0, 1);
//        series.add(1, 2);
//        series.add(2, 5);
//        series.add(7, 8);
//        series.add(9, 10);
        dataset.addSeries(t1);
//
//        XYSeriesCollection dataset = new XYSeriesCollection();
//        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "Progression des épargnes pour "+jComboBox1.getSelectedItem().toString(),
                "Mois",
                "Montant",
                dataset);
        
      p.setChart(chart);

//    Container contenu = getContentPane() ;
//    contenu.add(panel);
        
    } 
    
    
     public JFreeChart getChart (){
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries t1 = new TimeSeries("Commission sur Tontine");
        for (int i=0; i< jTable4.getRowCount(); i++) {
            t1.add(new Day((Date)jTable4.getValueAt(i, 0)), (double) jTable4.getValueAt(i, 4));
        }
//        XYSeries series = new XYSeries("MyGraph");
//        series.add(0, 1);
//        series.add(1, 2);
//        series.add(2, 5);
//        series.add(7, 8);
//        series.add(9, 10);
        dataset.addSeries(t1);
//
//        XYSeriesCollection dataset = new XYSeriesCollection();
//        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createXYLineChart(
                "Progression des épargnes pour ",
                "Mois",
                "Montant",
                dataset, 
                PlotOrientation.VERTICAL,
                true,
                true,
                false
                );
        
     return(chart);

  //  Container contenu = getContentPane() ;
   // contenu.add(panel);
        
    } 
    
    
   private void reCalcurate(TableModel ml) {
    if (ml == null)
      return;
    double total = 0.0;
    for (int i = 0; i < totalrow; i++) {
   //   total += ((Double) ml.getValueAt(i, totalrow)).doubleValue();
        total += ((Double) jTable1.getValueAt(i, totalrow)).doubleValue();
    }

    jTable1.setValueAt(new Double(total), totalrow, TOTAL_COLUMN);
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable() {
            public boolean getScrollableTracksViewportWidth(){
                return getPreferredSize().width < getParent().getWidth();
            }
        };
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel3 = new ChartPanel(getChart());
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        demoDateField1 = new com.jp.samples.comp.calendarnew.DemoDateField();
        jLabel3 = new javax.swing.JLabel();
        demoDateField2 = new com.jp.samples.comp.calendarnew.DemoDateField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nehemie_mutuelle/synthèse.png"))); // NOI18N

        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setOpaque(true);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel1.setVerifyInputWhenFocusTarget(false);

        conn = Connect.ConnectDb();
        ResultSet rs0 = null;
        try {
            pre = conn.prepareStatement("SELECT MIN(DateEpargne), MAX(DateEpargne) FROM Epargne");
            rs0 = pre.executeQuery();
            while (rs0.next()) {
                startDate=rs0.getDate(1);
                //endDate=rs0.getDate(2);

                endDate = new Date();
                if (endDate.before(rs0.getDate(2))) endDate = rs0.getDate(2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Epargneview2.class.getName()).log(Level.SEVERE, null, ex);
        }   finally {

            try {
                if (rs0 !=null)
                rs0.close();

                if (pre !=null)
                pre.close();

                if (conn !=null)
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Epargneview2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try {
            // TODO add your handling code here:
            data=getSynthese();
        } catch (Exception ex) {
            Logger.getLogger(Epargneview2.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] out = to2DimArray(data);

        //jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable4.setFillsViewportHeight(true);
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            out,
            new String [] {
                "Mois", "FTC", "Epargne", "Retraits", "Solde"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            Class[] types = {Date.class, Double.class, Double.class,
                Double.class, Double.class};

            @Override
            public Class getColumnClass(int columnIndex) {
                return this.types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
            // nouveau ajout
            // public void setValueAt(Object value, int row, int col) {
                //     Vector rowVector = (Vector) dataVector.elementAt(row);
                //     if (col == TOTAL_COLUMN) {
                    //          Double d = null;
                    //         if (value instanceof Double) {
                        //            d = (Double) value;
                        //         } else {
                        //            try {
                            //                 d = new Double(((Number) formatter
                                //                     .parse((String) value)).doubleValue());
                        //         } catch (ParseException ex) {
                        //            d = new Double(0.0);
                        //         }
                    //    }
                //      rowVector.setElementAt(d, col);
                //  } else {
                //      rowVector.setElementAt(value, col);
                //  }}

    });
    //sorter
    sorter = new TableRowSorter<DefaultTableModel>((DefaultTableModel)jTable4.getModel());
    jTable4.setRowSorter(sorter);

    //jTable1.getModel().addTableModelListener(new TableModelListener() {

        //     public void tableChanged(TableModelEvent e) {
            //          totalrow= jTable1.getRowCount() -1;
            //          reCalcurate(jTable1.getModel());
            //      }
        //    });
jScrollPane4.setViewportView(jTable4);

jLabel6.setText("Choix de l'année:");

jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exercice 2011", "Exercice 2012", "Exercice 2013", "Exercice 2014" }));
int minyear=0;
int maxyear=0;
conn = Connect.ConnectDb();
ResultSet rs = null;
try {
    pre = conn.prepareStatement("SELECT MIN(YEAR(DateEpargne)) as minyear, MAX(YEAR(DateEpargne)) as maxyear FROM Epargne");
    rs = pre.executeQuery();
    while (rs.next()) {
        minyear=rs.getInt(1);
        maxyear=Calendar.getInstance().get(Calendar.YEAR);  // méthode à revoir
        if(maxyear < rs.getInt(2)) maxyear=rs.getInt(2);
    }
    } catch (SQLException ex) {
        Logger.getLogger(TontineSynthese.class.getName()).log(Level.SEVERE, null, ex);
    }   finally {

        try {
            if (rs !=null)
            rs.close();

            if (pre !=null)
            pre.close();

            if (conn !=null)
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(TontineSynthese.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Connect.close(conn, rs, pre);

    if (minyear !=0 && maxyear !=0){
        jComboBox1.removeAllItems();
        for (int i=minyear; i<=maxyear; i++) {
            jComboBox1.addItem("Exercice "+i);
        }
    }
    jComboBox1.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jComboBox1ItemStateChanged(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jLabel6)
                    .add(18, 18, 18)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 769, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(32, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(12, 12, 12)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel6)
                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(64, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Bilan annuel", jPanel1);

    jPanel2.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            jPanel2FocusGained(evt);
        }
    });

    jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

    jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jTable2.setFillsViewportHeight(true);
    jTable2.setPreferredScrollableViewportSize(new Dimension(1000,70));
    jTable2.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null}
        },
        new String [] {
            "N°", "N° Carnet", "Noms & Prénoms", "Report", "Total cotisé", "Retrait", "Solde"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }
    });
    jTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
    jTable2.getColumnModel().getColumn(1).setPreferredWidth(90);
    jTable2.getColumnModel().getColumn(2).setPreferredWidth(250);
    jTable2.getColumnModel().getColumn(3).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(4).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(5).setPreferredWidth(90);
    jTable2.getColumnModel().getColumn(6).setPreferredWidth(120);
    jTable2.getColumnModel().getColumn(7).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(8).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(9).setPreferredWidth(130);
    jTable2.getColumnModel().getColumn(10).setPreferredWidth(130);
    jScrollPane2= new FrozenTablePane(jTable2, 3);
    jScrollPane2.setViewportView(jTable2);

    org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
    );

    jTabbedPane2.addTab("tab1", jPanel4);

    jLabel7.setText("Année :");

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    JPanel jPanel5 = new JPanel();
    jTabbedPane2.add("tab 2", jPanel5);
    if (minyear !=0 && maxyear !=0){
        jComboBox2.removeAllItems();
        for (int i=minyear; i<=maxyear; i++) {
            jComboBox2.addItem("Exercice "+i);
        }
    }
    //jTabbedPane2.add("tab 3", jPanel4);
    //jTabbedPane2.add("tab 4", jPanel4);
    //jTabbedPane2.add("tab 5", jPanel4);

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane2)
                .add(jPanel2Layout.createSequentialGroup()
                    .add(jLabel7)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 256, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel7)
                .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 352, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    jTabbedPane1.addTab("Versements", jPanel2);

    //if (jComboBox1.getSelectedIndex() != -1) setChart((ChartPanel) jPanel3);
    jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 814, Short.MAX_VALUE)
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 397, Short.MAX_VALUE)
    );

    jTabbedPane1.addTab("Progression annuelle", jPanel3);

    jPanel6.setVerifyInputWhenFocusTarget(false);

    jTable1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
    header.add("Identifiant");
    header.add("Date");
    header.add("Motif");
    header.add("Epargnant");
    header.add("Montant");

    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jTable1.setFillsViewportHeight(true);
    jTable1.setPreferredScrollableViewportSize(new Dimension(1000,70));
    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}
        },
        new String [] {
            "Identifiant", "Date", "Motif", "Epargnant", "Montant"
        }
    ));
    jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
    jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
    jTable1.getColumnModel().getColumn(2).setPreferredWidth(185);
    jTable1.getColumnModel().getColumn(3).setPreferredWidth(230);
    jTable1.getColumnModel().getColumn(4).setPreferredWidth(190);
    jScrollPane1.setViewportView(jTable1);

    jLabel2.setText("Date début: ");

    jLabel3.setText("Date fin:");

    jButton1.setText("Valider");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel2))
            .add(43, 43, 43)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(demoDateField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .add(demoDateField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(493, Short.MAX_VALUE))
        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jButton1)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 793, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel6Layout.createSequentialGroup()
            .add(26, 26, 26)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jLabel2)
                .add(demoDateField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(demoDateField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel3))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 263, Short.MAX_VALUE)
            .add(jButton1)
            .addContainerGap())
        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(101, 101, 101)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .add(53, 53, 53)))
    );

    jTabbedPane1.addTab("Historique des mouvements", jPanel6);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1)
                .addContainerGap()))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(447, Short.MAX_VALUE))
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(65, 65, 65)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 435, Short.MAX_VALUE)
                .addContainerGap()))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        try {
//            // TODO add your handling code here:
//            data2=getMembres();
//        } catch (Exception ex) {
//            Logger.getLogger(Epargneview2.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
       
        //header.add("Identifiant");
        //header.add("Date");
        //header.add("Motif");
        //header.add("Epargnant");
        //header.add("Montant");
        try {
            // TODO add your handling code here:
            data2=getMembres();
        } catch (Exception ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        //jTable1.setModel(new javax.swing.table.DefaultTableModel(
            //            data,header
            //        ));

    // new javax.swing.table.DefaultTableModel(
        //    data,header
         System.out.println("data"+ data2);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(data2,header){

            Class[] types = {Integer.class, String.class, String.class,
                String.class,  Integer.class  };

            @Override
            public Class getColumnClass(int columnIndex) {
                return this.types[columnIndex];
            }
        });
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
jTable1.setFillsViewportHeight(true);
jTable1.setPreferredScrollableViewportSize(new Dimension(1000,70));
jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
jTable1.getColumnModel().getColumn(2).setPreferredWidth(185);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(230);
jTable1.getColumnModel().getColumn(4).setPreferredWidth(190);
jScrollPane1.setViewportView(jTable1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        RowFilter<DefaultTableModel, Object> rf  = RowFilter.regexFilter(((String)jComboBox1.getSelectedItem().toString()).substring(jComboBox1.getSelectedItem().toString().lastIndexOf(" ")+1), 0);
        sorter.setRowFilter(rf);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jPanel2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel2FocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel2FocusGained

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();
        int index = sourceTabbedPane.getSelectedIndex();
        if(index==2 && jComboBox1.getSelectedIndex() != -1) {
            setChart((ChartPanel) jPanel3);
        }

    }//GEN-LAST:event_jTabbedPane1StateChanged
    public String getNamefromId(int id, String type) throws SQLException{
        if(type.equalsIgnoreCase("Enfant")){
             String nom="";
             PreparedStatement pre;
             pre = conn.prepareStatement("SELECT Nom, Prenoms FROM Profil_enfant WHERE idProfil_enfant='"+id+"';");
             ResultSet rs = pre.executeQuery();
              while(rs.next()) {
                nom =rs.getString("Nom")+","+rs.getString("Prenoms");
              }
              return nom;
        } else if ((type.equalsIgnoreCase("Adulte"))){ 
            String nom="";
             PreparedStatement pre;
             pre = conn.prepareStatement("SELECT Noms, Prenoms FROM Profil_adulte WHERE idProfil_adulte='"+id+"';");
             ResultSet rs = pre.executeQuery();
              while(rs.next()) {
                nom =rs.getString("Noms")+","+rs.getString("Prenoms");
              }
              return nom;
            
        } else {
            String nom="";
             PreparedStatement pre;
             pre = conn.prepareStatement("SELECT Raison_sociale FROM Profil_persmorale WHERE idProfil_persmorale='"+id+"';");
             ResultSet rs = pre.executeQuery();
              while(rs.next()) {
                nom =rs.getString("Raison_sociale");
              }
              return nom;
            
        }
            
    }
    
    public  Vector  getMembres() throws Exception {
    conn = Connect.ConnectDb();
    int i=1;
    java.sql.Date sqlDate1=new java.sql.Date(demoDateField1.getDate().getTime());
    java.sql.Date sqlDate2=new java.sql.Date(demoDateField2.getDate().getTime());
    PreparedStatement pre;
        System.out.println("requête"+"SELECT * FROM Epargne WHERE DateEpargne between '"+sqlDate1+"' AND '"+sqlDate2+ "';");
    pre = conn.prepareStatement("SELECT * FROM Epargne WHERE DateEpargne between '"+sqlDate1+"' AND '"+sqlDate2+ "';");
    ResultSet rs = pre.executeQuery();
   // Vector<Vector<String>> membreVector = new Vector<Vector<String>>();
    Vector<Vector> membreVector = new Vector<Vector>();
    while(rs.next()) {
     //   Vector<String> membre = new Vector<String>();
     //   membre.add(String.valueOf(i)); 
        Vector<Object> membre = new Vector<Object>();
        membre.add(i);
        membre.add(rs.getString("DateEpargne")); 
        membre.add(rs.getString("MotifEpargne")); 
        String type=rs.getString("TypeEpargnant");
        int id= rs.getInt("IdEpargnant");
        String epargnant=getNamefromId(id, type);
        membre.add(epargnant);
        membre.add(rs.getInt("MontantEpargne")); 
   //
        membreVector.add(membre);
        i++;
    }
    
   
   

/*Close the connection after use (MUST)*/
    if(conn!=null)
        conn.close();

    return membreVector;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Epargneview2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Epargneview2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Epargneview2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Epargneview2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Epargneview2().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Epargneview2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.jp.samples.comp.calendarnew.DemoDateField demoDateField1;
    private com.jp.samples.comp.calendarnew.DemoDateField demoDateField2;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables

}
