/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nehemie_mutuelle;

import com.l2fprod.gui.plaf.skin.Skin;
import com.l2fprod.gui.plaf.skin.SkinLookAndFeel;
import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author elommarcarnold
 */
public class Login extends javax.swing.JFrame {
    
     private Connection connect;
     private int countAttempt=0;

    /** Creates new form Login */
    public Login() {
        initComponents();
    }
    
    


 public boolean authenticate(String attemptedPassword, byte[] encryptedPassword, byte[] salt)
   throws NoSuchAlgorithmException, InvalidKeySpecException {
  // Encrypt the clear-text password using the same salt that was used to
  // encrypt the original password
  byte[] encryptedAttemptedPassword = getEncryptedPassword(attemptedPassword, salt);

  // Authentication succeeds if encrypted password that the user entered
  // is equal to the stored hash
  return Arrays.equals(encryptedPassword, encryptedAttemptedPassword);
 }

 public byte[] getEncryptedPassword(String password, byte[] salt)
   throws NoSuchAlgorithmException, InvalidKeySpecException {
  // PBKDF2 with SHA-1 as the hashing algorithm. Note that the NIST
  // specifically names SHA-1 as an acceptable hashing algorithm for PBKDF2
  String algorithm = "PBKDF2WithHmacSHA1";
  // SHA-1 generates 160 bit hashes, so that's what makes sense here
  int derivedKeyLength = 160;
  // Pick an iteration count that works for you. The NIST recommends at
  // least 1,000 iterations:
  // http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf
  // iOS 4.x reportedly uses 10,000:
  // http://blog.crackpassword.com/2010/09/smartphone-forensics-cracking-blackberry-backup-passwords/
  int iterations = 20000;

  KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength);

  SecretKeyFactory f = SecretKeyFactory.getInstance(algorithm);

  return f.generateSecret(spec).getEncoded();
 }

 public byte[] generateSalt() throws NoSuchAlgorithmException {
  // VERY important to use SecureRandom instead of just Random
  SecureRandom random = SecureRandom.getInstance("SHA1PRNG");

  // Generate a 8 byte (64 bit) salt as recommended by RSA PKCS5
  byte[] salt = new byte[8];
  random.nextBytes(salt);

  return salt;
 }
 

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nehemie_mutuelle/loginimg.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setText("Nom d'utilisateur: ");

        jLabel3.setText("Mot de passe:");

        jButton1.setText("Valider");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nehemie_mutuelle/house_keys_home_pair-5122.png"))); // NOI18N

        jLabel5.setForeground(new java.awt.Color(254, 1, 1));
        jLabel5.setText("");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 503, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton1)
                        .add(107, 107, 107))
                    .add(layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jTextField1)
                                .add(jPasswordField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                        .add(13, 13, 13)))
                .add(jLabel4)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(11, 11, 11)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jPasswordField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton1))
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
//         connect = Connect.ConnectDb();
//             boolean success=true;
//             PreparedStatement pst=null;
//             String sql = "INSERT INTO Login(idLogin,Username, Salt, Password) VALUES(?,?,?,?)";
//         
//         byte[] salt = new byte[8];
//        try {
//            salt=this.generateSalt();
//        } catch (NoSuchAlgorithmException ex) {
//            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//        }       
//                
//                //for (int i=0; i<8; i++)
//                System.out.println(Arrays.toString(salt));
//                
//                   byte []data = {-71, 51, -42, -107, -45, 15, -78, 62};
//                    byte[] encryptedAttemptedPassword=null;
//                  
////                 byte[] dat = {'0','1','2','3','4','5','6','7','8','9'};               
//
//                
//        try {
//            encryptedAttemptedPassword=getEncryptedPassword("nehemie17", data);
//            for (int i=0; i<encryptedAttemptedPassword.length; i++)
//                System.out.println("pass"+encryptedAttemptedPassword[i]);
//                
//        } catch (NoSuchAlgorithmException ex) {
//            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (InvalidKeySpecException ex) {
//            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//         try {
//             pst = connect.prepareStatement(sql);
//             pst.setString(1, null);
//             pst.setString(2,"nehemie");
//             pst.setBinaryStream(3,new ByteArrayInputStream(data),data.length);
//             pst.setBinaryStream(4,new ByteArrayInputStream(encryptedAttemptedPassword),encryptedAttemptedPassword.length);
//         } catch (SQLException ex) {
//             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//         }
//         try {
//             int  rowsaffected = pst.executeUpdate();
//         } catch (SQLException ex) {
//             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//         }
        
             connect = Connect.ConnectDb();
             boolean success=true;
             Statement stmt=null;
             ResultSet rst=null;
             String sql = "Select Username From Login WHERE Username='"+jTextField1.getText()+"'";
         try {
            stmt=connect.createStatement();
            rst= stmt.executeQuery(sql);
            
         } catch (SQLException ex) {
             jLabel5.setText("Impossible de se connecter à la BD");  //à voir 
             success=false;
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
         }
         try {
             if(! rst.next()){
                 countAttempt++;
                 jLabel5.setText("Nom d'utilisateur ou mot de passe non valide");
             } else {
                 String sql2 = "SELECT Salt, Password FROM Login WHERE Username='"+jTextField1.getText()+"'";
                 Statement statement = connect.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet result    = statement.executeQuery(sql2);
                if(result.next()){ // got at least one row, and only one row if theID is primary key
                     Blob blobsalt = result.getBlob("Salt"); // creates the blob object from the result
                     Blob blobencrypted=result.getBlob("Password");
   /*
      blob index starts with 1 instead of 0, and starting index must be (long).
      we want all the bytes back, so this grabs everything.
      keep in mind, if the blob is longer than max int length, this won't work right
      because a byte array has max length of max int length.
   */
   byte[] theBytesSalt = blobsalt.getBytes(1L, (int)blobsalt.length());
   byte[] theBytesPass = blobencrypted.getBytes(1L, (int)blobencrypted.length());
   // just to make sure:
   if((authenticate(String.valueOf(jPasswordField1.getPassword()), theBytesPass, theBytesSalt)) == false){
       // jLabel5.setText("Mot de passe incorrect");
          jLabel5.setText("Nom d'utilisateur ou mot de passe non valide");
   } else {
       main mn= new main();
       mn.setLocationRelativeTo(null);
       mn.setVisible(true);
       this.dispose();
 //             
   }
  }
  }
         } catch (SQLException ex) {
             success=false;
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
         } catch (NoSuchAlgorithmException ex) {
             success=false;
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
         } catch (InvalidKeySpecException ex) {
             success=false;
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
         }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static  void main(String args[]) throws NoSuchAlgorithmException, MalformedURLException, Exception {
         
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//                
//try{UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());}
//catch(Exception e){} 
        
 // URL themepack = new URL(main.class.getClass().getResource("nehemie_mutuelle/whistlerthemepack.zip").getPath());
  //          System.out.println("url:"+ main.class.getClass().getResource("/nehemie_mutuelle/whistlerthemepack.zip").getPath());
//           URL themepack = new URL("file://"+urlthe);
//           System.out.println("url:"+urlthe);
//           // URL themepack = new URL("file://"+new File("src/nehemie_mutuelle/whistlerthemepack.zip").getAbsolutePath() );
  //        Skin skin = SkinLookAndFeel.loadThemePack(themepack);
  //        SkinLookAndFeel.setSkin(skin);   
   //       UIManager.setLookAndFeel("com.l2fprod.gui.plaf.skin.SkinLookAndFeel"); 
        InputStream themepack = main.class.getClass().getResourceAsStream("/nehemie_mutuelle/whistlerthemepack.zip");
       //     System.out.println("url:"+ "file://"+ main.class.getClass().getResourceAsStream("whistlerthemepack.zip"));
//           URL themepack = new URL("file://"+urlthe);
//           System.out.println("url:"+urlthe);
//           // URL themepack = new URL("file://"+new File("src/nehemie_mutuelle/whistlerthemepack.zip").getAbsolutePath() );
          Skin skin = SkinLookAndFeel.loadThemePack(themepack);
          SkinLookAndFeel.setSkin(skin);   
          UIManager.setLookAndFeel("com.l2fprod.gui.plaf.skin.SkinLookAndFeel");  
                   
//        
//         URL themepack = new URL("file://"+new File("src/nehemie_mutuelle/whistlerthemepack.zip").getAbsolutePath() );
//          Skin skin = SkinLookAndFeel.loadThemePack(themepack);
//          SkinLookAndFeel.setSkin(skin);   
//          UIManager.setLookAndFeel("com.l2fprod.gui.plaf.skin.SkinLookAndFeel");
        //</editor-fold>

        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
               
                  
            }
        });
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
