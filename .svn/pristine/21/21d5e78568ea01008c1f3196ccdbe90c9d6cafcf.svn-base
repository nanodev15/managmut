/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nehemie_mutuelle.loan;

/**
 *
 * @author ucao
 */
import java.awt.event.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import nehemie_mutuelle.Connect;

/**
 * Adapted Robert Eckstein's sample at
 * http://java.sun.com/developer/technicalArticles/GUI/swing/wizard/
 *
 * This class is responsible for reacting to events generated by pushing any of
 * the three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is
 * pressed, the controller will update the model to show a new panel and reset
 * the state of the buttons as necessary.
 */
public class WizardController implements ActionListener
{
    private Wizard wizard;
    private String loanref;
    private Connection conn;
    private  Date begindate;
    private Double mensualite;
    private String periodicite;
    private int periodicite2;
    private  int nbJours;
    private Double taux;
    private int nbPeriod;

    /**
     * This constructor accepts a reference to the Wizard component that created
     * it, which it uses to update the button components and access the
     * WizardModel.
     *
     * @param w
     *            A callback to the Wizard component that created this
     *            controller.
     */
    public WizardController(Wizard w)
    {
        wizard = w;
        conn=Connect.ConnectDb();
    }
    
    public void savedata () throws SQLException{
        java.sql.Date begindatesql = new java.sql.Date(this.begindate.getTime());
        java.sql.Date todaydate =  new java.sql.Date(new Date().getTime());
        String sql = "INSERT INTO loanrecautom VALUES ("+ null +", '"+ begindatesql + "', '"+ periodicite2 +"', '"+ nbPeriod+"', "+null+", '"+ taux + "', '"+ loanref+ "', '"+todaydate+"', '"+"En cours" +"');";
        PreparedStatement pst= conn.prepareStatement(sql);
        pst.execute();
        
        
        //close 
        conn.close();
        pst.close();
        
        
    }

    /**
     * Calling method for the action listener interface. This class listens for
     * actions performed by the buttons in the Wizard class, and calls methods
     * below to determine the correct course of action.
     *
     * @param evt
     *            The ActionEvent that occurred.
     */
    public void actionPerformed(java.awt.event.ActionEvent evt)
    {
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(
                Wizard.BACK_BUTTON_ACTION_COMMAND))
            backButtonPressed();
        else if (evt.getActionCommand().equals(
                Wizard.NEXT_BUTTON_ACTION_COMMAND))
            try {
                nextButtonPressed();
        } catch (SQLException ex) {
            Logger.getLogger(WizardController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void backButtonPressed()
    {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        if(descriptor.getClass()==TestPanel3Descriptor.class){
            Object backPanelDescriptor;
            if (((CreditPanel0) model.getPanelDescriptor("INTRODUCTION_PANEL").getPanelComponent()).isManuelSelected()) {
                   ((TestPanel3Descriptor) descriptor).setId(0);
                   backPanelDescriptor =   ((TestPanel3Descriptor) descriptor).getBackPanelDescriptor();
            } else {
                  ((TestPanel3Descriptor) descriptor).setId(1);
                   backPanelDescriptor =   ((TestPanel3Descriptor) descriptor).getBackPanelDescriptor();
            }
            wizard.setCurrentPanel(backPanelDescriptor);
        } else {

        // Get the descriptor that the current panel identifies as the previous
        // panel, and display it.

        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();
        wizard.setCurrentPanel(backPanelDescriptor);
        }
    }

    private void cancelButtonPressed()
    {
        wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() throws SQLException
    {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
       
        
        if(descriptor.getClass()==TestPanel1Descriptor.class){
           if (((CreditPanel0) descriptor.getPanelComponent()).noneisSelected()) {
               JOptionPane.showMessageDialog(descriptor.getPanelComponent(), "Veuillez choisir un type de configuration");
           } else {
               Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
               loanref=((CreditPanel0) descriptor.getPanelComponent()).getRef();
               wizard.setCurrentPanel(nextPanelDescriptor);
              ((CreditPanelAutom1) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).setLoanref(loanref);
               
           } 
           
           
               
        } else if(descriptor.getClass()==TestPanel2Descriptor.class) {
              Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
              
              
              // recupération des coordonnées 
               Date begindate= ((CreditPanelManuel1) descriptor.getPanelComponent()).getFirstPayementDate();
               int nbPeriod = ((CreditPanelManuel1) descriptor.getPanelComponent()).getNbPeriod();
               String periodicite= ((CreditPanelManuel1) descriptor.getPanelComponent()).getFreqPayment();
               int nbJours= ((CreditPanelManuel1) descriptor.getPanelComponent()).getIntervalDate();
               
             // ((CreditPanelManuel2) ((WizardPanelDescriptor) nextPanelDescriptor).getPanelComponent()).fillTable(null, 0, null, 0
            //  );
                 wizard.setCurrentPanel(nextPanelDescriptor);
 //             ((CreditPanelManuel2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillTable(new Date(), 10, "periodique", 28);
                 ((CreditPanelManuel2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillTable(begindate, nbPeriod, periodicite, nbJours);
            
        }else if (descriptor.getClass()==CreditPanelAutom1Descriptor.class) {
              Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
              
              
              
              // Si on veuille calculer la mensualité 
              if (((CreditPanelAutom1) descriptor.getPanelComponent()).calculMensualite()) {
              
              
              // recupération des coordonnées 
               begindate= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFirstPayementDate();
               nbPeriod = ((CreditPanelAutom1) descriptor.getPanelComponent()).getNbPeriod();
               periodicite= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFreqPayment();
               nbJours= ((CreditPanelAutom1) descriptor.getPanelComponent()).getIntervalDate();
               taux= ((CreditPanelAutom1) descriptor.getPanelComponent()).getrate();
               Double montant = ((CreditPanelAutom1) descriptor.getPanelComponent()).getMontant();
               
             // ((CreditPanelManuel2) ((WizardPanelDescriptor) nextPanelDescriptor).getPanelComponent()).fillTable(null, 0, null, 0
            //  );
                 wizard.setCurrentPanel(nextPanelDescriptor);
 //             ((CreditPanelManuel2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillTable(new Date(), 10, "periodique", 28);
                 ((CreditPanelAutom2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillTableAuto(begindate, nbPeriod, periodicite, nbJours, montant, taux);
                 
              } else if ((((CreditPanelAutom1) descriptor.getPanelComponent()).calculNbPeriodes())) {
                  
                   // recupération des coordonnées 
               Date begindate= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFirstPayementDate();
             //  int nbPeriod = ((CreditPanelAutom1) descriptor.getPanelComponent()).getNbPeriod();
               Double mensualite= ((CreditPanelAutom1) descriptor.getPanelComponent()).getMensualite();
               String periodicite= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFreqPayment();
               int nbJours= ((CreditPanelAutom1) descriptor.getPanelComponent()).getIntervalDate();
               Double taux= ((CreditPanelAutom1) descriptor.getPanelComponent()).getrate();
               Double montant = ((CreditPanelAutom1) descriptor.getPanelComponent()).getMontant();
               
             // ((CreditPanelManuel2) ((WizardPanelDescriptor) nextPanelDescriptor).getPanelComponent()).fillTable(null, 0, null, 0
            //  );
                 wizard.setCurrentPanel(nextPanelDescriptor);
 //             ((CreditPanelManuel2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillTable(new Date(), 10, "periodique", 28);
                 ((CreditPanelAutom2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillnbEcheances(begindate, periodicite, nbJours, montant, taux, mensualite);
                  
              } else if ((((CreditPanelAutom1) descriptor.getPanelComponent()).calculCapital())) {
                  
                   // recupération des coordonnées 
               begindate= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFirstPayementDate();
             //  int nbPeriod = ((CreditPanelAutom1) descriptor.getPanelComponent()).getNbPeriod();
               mensualite= ((CreditPanelAutom1) descriptor.getPanelComponent()).getMensualite();
               periodicite= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFreqPayment();
               periodicite2= ((CreditPanelAutom1) descriptor.getPanelComponent()).getFreqPayment2();
               nbJours= ((CreditPanelAutom1) descriptor.getPanelComponent()).getIntervalDate();
               taux= ((CreditPanelAutom1) descriptor.getPanelComponent()).getrate();
               nbPeriod = ((CreditPanelAutom1) descriptor.getPanelComponent()).getNbPeriod();
          //     Double montant = ((CreditPanelAutom1) descriptor.getPanelComponent()).getMontant();
               
             // ((CreditPanelManuel2) ((WizardPanelDescriptor) nextPanelDescriptor).getPanelComponent()).fillTable(null, 0, null, 0
            //  );
                 wizard.setCurrentPanel(nextPanelDescriptor);
 //             ((CreditPanelManuel2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillTable(new Date(), 10, "periodique", 28);
                 ((CreditPanelAutom2) wizard.getModel().getCurrentPanelDescriptor().getPanelComponent()).fillCapital(begindate, periodicite, nbJours, taux, mensualite,nbPeriod);
                  
              }
        } else {
        // If it is a finishable panel, close down the dialog. Otherwise,
        // get the ID that the current panel identifies as the next panel,
        // and display it.

        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();

        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier)
        {  
              // Gérer les différents choix after
           // System.out.println("it is here");
            savedata();
            wizard.close(Wizard.FINISH_RETURN_CODE);
            
          
            
        } else
        {
           
            wizard.setCurrentPanel(nextPanelDescriptor);
        }
        }

    }

    void resetButtonsToPanelRules()
    {
        // Reset the buttons to support the original panel rules,
        // including whether the next or back buttons are enabled or
        // disabled, or if the panel is finishable.

        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();

        model.setCancelButtonText(Wizard.CANCEL_TEXT);
        // model.setCancelButtonIcon(Wizard.CANCEL_ICON);

        // If the panel in question has another panel behind it, enable
        // the back button. Otherwise, disable it.

        model.setBackButtonText(Wizard.BACK_TEXT);
        // model.setBackButtonIcon(Wizard.BACK_ICON);

        if (descriptor.getBackPanelDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);


        // If the panel in question has one or more panels in front of it,
        // enable the next button. Otherwise, disable it.

        if (descriptor.getNextPanelDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);

        // If the panel in question is the last panel in the series, change
        // the Next button to Finish. Otherwise, set the text back to Next.

        if (descriptor.getNextPanelDescriptor() instanceof WizardPanelDescriptor.FinishIdentifier)
        {
            model.setNextFinishButtonText(Wizard.FINISH_TEXT);
            // model.setNextFinishButtonIcon(Wizard.FINISH_ICON);
        } else
        {
            model.setNextFinishButtonText(Wizard.NEXT_TEXT);
            // model.setNextFinishButtonIcon(Wizard.NEXT_ICON);
        }

    }

}