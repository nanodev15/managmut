/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nehemie_mutuelle;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import static nehemie_mutuelle.EpargneContextRet.conn;
import java.lang.Object;
import java.sql.SQLException;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.TableCellRenderer;


/**
 *
 * @author elommarcarnold
 */
public class Loanopeninglist extends javax.swing.JFrame {
    private Connection conn;
    private Vector<Vector> data;
    private static loanmanager lnmanger;
    private static String retref= "";
    
   
    /** Creates new form Loanopeninglist */
    public Loanopeninglist() {
        initComponents();
    }
    
    public Loanopeninglist(loanmanager lnmanger) {
        initComponents();
        this.lnmanger= lnmanger;
        
    
}
    
     public static Object[][] to2DimArray(Vector v) {
        Object[][] out = new Object[v.size()][0];
        for (int i = 0; i < out.length; i++) {
            out[i] = ((Vector) v.get(i)).toArray();
        }
        return out;
    }
     
     
   public static void retmod(int ret) throws Exception{
        System.out.println(" entering here"+retref);
       if(ret ==0) {
           System.out.println("refreshing and uploading");
           //lnmanger.UpdateLoans(retref);
       }
       
   }  
     
  public class StatusRowCellRenderer extends DefaultTableCellRenderer {
  @Override
  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

    //Cells are by default rendered as a JLabel.
    JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

    //Get the status for the current row.
   // DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
    if (((String)table.getValueAt(row, 1)).equalsIgnoreCase("créé non finalisé")) {
        System.out.println("true finalized");
      l.setForeground(Color.BLUE);
    } else {
         System.out.println("other true");
      l.setForeground(Color.BLACK);
    }

  //Return the JLabel which renders the cell.
  return l;

}}

public class windowsadap extends WindowAdapter {
    
}  

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        try {
            // TODO add your handling code here:
            data = getLoanList();
        } catch (Exception ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

        Object[][] out = to2DimArray(data);

        //jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.setFillsViewportHeight(true);
        jTable1.setAutoCreateRowSorter(true);
        jTable1.setPreferredScrollableViewportSize(new Dimension(1000,70));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            out,
            new String [] {
                "Numéro dossier", "Statut", "Date de création"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.util.Date.class
            };

            //   public Class getColumnClass(int columnIndex) {
                //       return types [columnIndex];
                //   }

            @Override
            public Class getColumnClass(int column)
            {
                for (int row = 0; row < getRowCount(); row++)
                {
                    Object o = getValueAt(row, column);

                    if (o != null)
                    return o.getClass();
                }

                return Object.class;
            }

        });
        jTable1.setShowGrid (true);
        jTable1.setDefaultRenderer(Object.class, new StatusRowCellRenderer());
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        TableCellRenderer tableCellRenderer = new DefaultTableCellRenderer() {
            SimpleDateFormat f = new SimpleDateFormat("dd-MM/YYYY");
            public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus,
                int row, int column) {
                if( value instanceof Date) {
                    value = f.format(value);
                }
                return super.getTableCellRendererComponent(table, value, isSelected,
                    hasFocus, row, column);
            }
        };
        jTable1.getColumnModel().getColumn(2).setCellRenderer(tableCellRenderer);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Verdana", 2, 15)); // NOI18N
        jLabel1.setText("Veuillez choisir un numéro de dossier, puis cliquer sur Ouvrir");

        jButton1.setText("Ouvrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(34, 34, 34)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 600, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 539, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(306, 306, 306)
                        .add(jButton1)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 285, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        // TODO add your handling code here:
        JTable table =(JTable) evt.getSource();
        Point point = evt.getPoint();
        int row = table.rowAtPoint(point);
        if (evt.getClickCount() == 2 && table.getSelectedRow() != -1) {
            if (!((String)table.getValueAt(row, 1)).equalsIgnoreCase("créé non finalisé")) {
                int typedata=0;
                conn = Connect.ConnectDb();
                ResultSet rs=null;
                PreparedStatement pre;
                try {
                    pre = conn.prepareStatement("SELECT Loanrefnum, Typedonnes FROM Loan WHERE Loanrefnum ='"+(String) table.getValueAt(row, 0)+"'; ");
                    rs = pre.executeQuery();
                } catch (SQLException ex) {
                    Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
                }
               
                try {
                    while (rs.next()) {
                        typedata = rs.getInt("Typedonnes");  
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            if ((typedata==0)) {
                
                
            try {
                // your valueChanged overridden method               
                this.lnmanger.UpdateLoans((String) table.getValueAt(row, 0));
                this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
            }
            
           
            
            } else if ((typedata==1)) {
                
             try {
                // your valueChanged overridden method               
                this.lnmanger.UpdateLoansfree((String) table.getValueAt(row, 0));
                this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                
                
            } else {
                
                System.out.println("arrived in lnmanger");
                
                    try {
                // your valueChanged overridden method               
                this.lnmanger.UpdateLoansterme((String) table.getValueAt(row, 0));
                this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
            }
                
                
                
            }
            
                System.out.println("typedata is "+ typedata);   
            lnmanger.disable(typedata+1); 
            
            
            
            } else {
                
                System.out.println("we are in non fialisea");
            // Non finalisé maintenant on va le finaliser 
              
        int typedonnes=-1;
        String loanrefnum="";
             try {
        conn = Connect.ConnectDb();
        PreparedStatement pre = conn.prepareStatement("SELECT Loanrefnum, Typedonnes FROM Loan WHERE Loanrefnum ='"+(String) table.getValueAt(row, 0)+"'; ");
        ResultSet rs = pre.executeQuery();
       

           
                while (rs.next()) {
                    typedonnes = rs.getInt("Typedonnes");
                    loanrefnum =rs.getString("Loanrefnum");
                    
                    
                    
                }   } catch (SQLException ex) {
                Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
            }
            retref=loanrefnum;
            
             
            if ((typedonnes==0) || (typedonnes==1)) {
            nehemie_mutuelle.loan.Test loantest = new nehemie_mutuelle.loan.Test(loanrefnum, typedonnes, this);
           
                    
               
                String [] args= {""};
                try {
                    loantest.main(args);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(loanew.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(loanew.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(loanew.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(loanew.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(loanew.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
            }
                
//                 loantest.getWizard().getwizardDialog().addWindowListener(
//                    new WindowAdapter() {
//                          @Override
//                            public void windowClosing(WindowEvent we) {
//                              try {
//                                  System.out.println("it is closing");
//                                  lnmanger.UpdateLoans(loanrefcopy);
//                              } catch (Exception ex) {
//                                  Logger.getLogger(Loanopeninglist.class.getName()).log(Level.SEVERE, null, ex);
//                              }
//      
//                           }
//                    }
//            
//            
//            );  
                      
        }       
        }       
        }
        
        
    }//GEN-LAST:event_jTable1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
 
public void refreshopeninglist() throws Exception {
 try {
            // TODO add your handling code here:
           data = getLoanList();
        } catch (Exception ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

Object[][] out = to2DimArray(data);

//jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
jTable1.setFillsViewportHeight(true);
jTable1.setAutoCreateRowSorter(true);
jTable1.setPreferredScrollableViewportSize(new Dimension(1000,70));
jTable1.setModel(new javax.swing.table.DefaultTableModel(
    out,
    new String [] {
        "Numéro dossier", "Statut", "Date de création"
    }
) {
    Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class, java.lang.Object.class
    };

    //   public Class getColumnClass(int columnIndex) {
        //       return types [columnIndex];
        //   }

    @Override
    public Class getColumnClass(int column)
    {
        for (int row = 0; row < getRowCount(); row++)
        {
            Object o = getValueAt(row, column);

            if (o != null)
            return o.getClass();
        }

        return Object.class;
    }

});
jTable1.setShowGrid (true);
jTable1.setDefaultRenderer(Object.class, new StatusRowCellRenderer());   
}    
public Vector getLoanList() throws Exception {
        conn = Connect.ConnectDb();

        PreparedStatement pre = conn.prepareStatement("SELECT * FROM (SELECT loanref , Statut, Datecreation FROM loanrecautom UNION SELECT idloan as loanref , statut as Statut, datecreation as Datecreation FROM loanreclibre UNION SELECT idloan as loanref , statut as Statut, datecreation as Datecreation FROM loanrecterme) temp ORDER BY Datecreation DESC");
        ResultSet rs = pre.executeQuery();
        SimpleDateFormat sdf= new SimpleDateFormat("dd-MM/YYYY");
//        SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");
//        SimpleDateFormat sdf2= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        // Vector<Vector<String>> membreVector = new Vector<Vector<String>>();
        Vector<Vector> openlistVector = new Vector<Vector>();
        while (rs.next()) {
     //   Vector<String> membre = new Vector<String>();
            //   membre.add(String.valueOf(i)); 
            Vector<Object> openelem = new Vector<Object>();
            openelem.add(rs.getString("loanref"));
            openelem.add(rs.getString("Statut"));
            if (rs.getDate("Datecreation") != null) { 
         //   String date=sdf.format(rs.getDate("Datecreation"));
            openelem.add(rs.getDate("Datecreation"));
          //  openelem.add(new java.sql.Timestamp(date.getTime()));  
            }
           //
            
            openlistVector.add(openelem);
        }
        
        // Now add those who are not finalized
        pre = conn.prepareStatement("SELECT Loanrefnum FROM Loan WHERE Loanrefnum NOT IN (SELECT * FROM ((SELECT loanref FROM loanrecautom ) UNION (SELECT idloan FROM loanreclibre)) l) ");
        rs = pre.executeQuery();

        while (rs.next()) {
     //   Vector<String> membre = new Vector<String>();
            //   membre.add(String.valueOf(i)); 
            Vector<Object> openelem = new Vector<Object>();
            openelem.add(rs.getString("loanrefnum"));
            openelem.add(new String("Créé non finalisé"));
//            if (rs.getString("Datecreation") != null) { 
//            String date=sdf.format(rs.getDate("Datecreation"));
            openelem.add(null);
             openlistVector.add(openelem);
          //  openelem.add(new java.sql.Timestamp(date.getTime()));  
            }
        
        

        /*Close the connection after use (MUST)*/
        if (conn != null) {
            conn.close();
        }
        
        if (pre != null) {
            pre.close();
        }
        
        if (rs != null) {
            rs.close();
        }
        
        
        return openlistVector;
        
  }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Loanopeninglist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Loanopeninglist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Loanopeninglist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Loanopeninglist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Loanopeninglist().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
